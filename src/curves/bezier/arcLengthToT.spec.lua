-- ROBLOX NOTE: no upstream
local JestGlobals = require("@DevPackages/JestGlobals")
local test, expect = JestGlobals.test, JestGlobals.expect

local bezier = require("../init").bezier
local length = require("./length")
local arcLengthToT = require("./arcLengthToT")
local nearlyEqual = require("../../../test/helpers/init").nearlyEqual
test("calculate arcLengthToT for an 1D linear bezier with numeric control points", function()
	local bezierCurve = bezier.create({ 0, 10 })
	local len = length(100, bezierCurve)
	nearlyEqual(arcLengthToT({ distance = 0 }, bezierCurve), 0, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len / 2 }, bezierCurve), 0.5, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len }, bezierCurve), 1, 0.0001)
	expect(true).toBe(true)
end)
test("calculate arcLengthToT for an 1D linear bezier with array control points", function()
	local bezierCurve = bezier.create({ { 0 }, { 10 } })
	local len = length(100, bezierCurve)
	nearlyEqual(arcLengthToT({ distance = 0 }, bezierCurve), 0, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len / 2 }, bezierCurve), 0.5, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len }, bezierCurve), 1, 0.0001)
	expect(true).toBe(true)
end)
test("calculate arcLengthToT for a 2D linear bezier", function()
	local bezierCurve = bezier.create({ { 0, 0 }, { 10, 10 } })
	local len = length(100, bezierCurve)
	nearlyEqual(arcLengthToT({ distance = 0 }, bezierCurve), 0, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len / 2 }, bezierCurve), 0.5, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len }, bezierCurve), 1, 0.0001)
	expect(true).toBe(true)
end)
test("calculate arcLengthToT for a 2D quadratic (3 control points) bezier", function()
	local bezierCurve = bezier.create({ { 0, 0 }, { 0, 10 }, { 10, 10 } })
	local len = length(100, bezierCurve)
	nearlyEqual(arcLengthToT({ distance = 0 }, bezierCurve), 0, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len / 2 }, bezierCurve), 0.50001, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len }, bezierCurve), 1, 0.0001)
	expect(true).toBe(true)
end)
test("calculate arcLengthToT for a 2D cubic (4 control points) bezier", function()
	local bezierCurve = bezier.create({ { 0, 0 }, { 0, 10 }, { 10, 10 }, { 10, 0 } })
	local len = length(100, bezierCurve)
	nearlyEqual(arcLengthToT({ distance = 0 }, bezierCurve), 0, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len / 2 }, bezierCurve), 0.49999, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len }, bezierCurve), 1, 0.0001)
	expect(true).toBe(true)
end)
test("calculate arcLengthToT for a 3D linear bezier", function()
	local bezierCurve = bezier.create({ { 0, 0, 0 }, { 10, 10, 10 } })
	local len = length(100, bezierCurve)
	nearlyEqual(arcLengthToT({ distance = 0 }, bezierCurve), 0, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len / 2 }, bezierCurve), 0.49999, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len }, bezierCurve), 1, 0.0001)
	expect(true).toBe(true)
end)
test("calculate arcLengthToT for a 3D quadratic (3 control points) bezier", function()
	local bezierCurve = bezier.create({ { 0, 0, 0 }, { 5, 5, 5 }, { 0, 0, 10 } })
	local len = length(100, bezierCurve)
	nearlyEqual(arcLengthToT({ distance = 0 }, bezierCurve), 0, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len / 2 }, bezierCurve), 0.49999, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len }, bezierCurve), 1, 0.0001)
	expect(true).toBe(true)
end)
test("calculate arcLengthToT for a 3D cubic (4 control points) bezier", function()
	local bezierCurve = bezier.create({ { 0, 0, 0 }, { 5, 5, 5 }, { 0, 0, 10 }, { -5, -5, 5 } })
	local len = length(100, bezierCurve)
	nearlyEqual(arcLengthToT({ distance = 0 }, bezierCurve), 0, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len / 2 }, bezierCurve), 0.5621, 0.0001)
	nearlyEqual(arcLengthToT({ distance = len }, bezierCurve), 1, 0.0001)
	expect(true).toBe(true)
end)
