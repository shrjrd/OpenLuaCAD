-- ROBLOX NOTE: no upstream
local JestGlobals = require("@DevPackages/JestGlobals")
local test, expect = JestGlobals.test, JestGlobals.expect

local bezier = require("../init").bezier
test("Linear bezier (straight line between two points)", function()
	local straightLine = bezier.create({ 10, 20 })
	expect(bezier.valueAt(0, straightLine)).toBe(10)
	expect(bezier.valueAt(0.5, straightLine)).toBe(15)
	expect(bezier.valueAt(1, straightLine)).toBe(20)
end)
test("bezier with non-numbers throws error", function()
	expect(function()
		return bezier.create({ "what", 20 })
	end).toThrowError(--[[{ instanceOf = Error }]])
end)
test("quadratic bezier (3 control points)", function()
	local OneDCurve = bezier.create({ 0, 10, 20 })
	expect(bezier.valueAt(0, OneDCurve)).toBe(0)
	expect(bezier.valueAt(0.5, OneDCurve)).toBe(10)
	expect(bezier.valueAt(1, OneDCurve)).toBe(20)
end)
test("quadratic bezier (3 control points, non symmetric)", function()
	local OneDCurve = bezier.create({ 0, 0, 20 })
	expect(bezier.valueAt(0, OneDCurve)).toBe(0)
	expect(bezier.valueAt(0.5, OneDCurve)).toBe(5)
	expect(bezier.valueAt(1, OneDCurve)).toBe(20)
end)
test("quadratic bezier (4 control points)", function()
	local OneDCurve = bezier.create({ 0, 0, 20, 20 })
	expect(bezier.valueAt(0, OneDCurve)).toBe(0)
	expect(bezier.valueAt(0.5, OneDCurve)).toBe(10)
	expect(bezier.valueAt(1, OneDCurve)).toBe(20)
end)
test("bezier with numbers and array of numbers throws error", function()
	expect(function()
		return bezier.create({ { 0, 5, 10 }, 20 })
	end).toThrowError(--[[{ instanceOf = Error }]])
end)
test("bezier with array of numbers of different size throws error", function()
	expect(function()
		return bezier.create({ { 0, 5, 10 }, { 20, 0 } })
	end).toThrowError(--[[{ instanceOf = Error }]])
end)
test("quadratic bezier one dimension, 3 control points", function()
	local OneDCurve = bezier.create({ { 0 }, { 10 }, { 20 } })
	expect(bezier.valueAt(0, OneDCurve)).toEqual({ 0 })
	expect(bezier.valueAt(0.5, OneDCurve)).toEqual({ 10 })
	expect(bezier.valueAt(1, OneDCurve)).toEqual({ 20 })
end)
test("quadratic bezier 2 dimensions, 3 control points", function()
	local TwoDCurve = bezier.create({ { 0, 10 }, { 30, 10 }, { 60, 20 } })
	expect(bezier.valueAt(0, TwoDCurve)).toEqual({ 0, 10 })
	expect(bezier.valueAt(0.5, TwoDCurve)).toEqual({ 30, 12.5 })
	expect(bezier.valueAt(1, TwoDCurve)).toEqual({ 60, 20 })
end)
test("bezier throws error when t is not between 0 and 1", function()
	local straightLine = bezier.create({ 0, 20 })
	expect(function()
		return bezier.valueAt(-2, straightLine)
	end).toThrowError(--[[{ instanceOf = Error }]])
	expect(function()
		return bezier.valueAt(1.1, straightLine)
	end).toThrowError(--[[{ instanceOf = Error }]])
end)
