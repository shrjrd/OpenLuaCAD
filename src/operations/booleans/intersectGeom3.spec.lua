-- ROBLOX NOTE: no upstream
local JestGlobals = require("@DevPackages/JestGlobals")
local test, expect = JestGlobals.test, JestGlobals.expect

local comparePolygonsAsPoints = require("../../../test/helpers").comparePolygonsAsPoints
local geom3 = require("../../geometries").geom3
local sphere, cuboid
do
	local ref = require("../../primitives")
	sphere, cuboid = ref.sphere, ref.cuboid
end
local intersect = require("./init").intersect
local center = require("../transforms/center").center
test("intersect: intersect of one or more geom3 objects produces expected geometry", function()
	local geometry1 = sphere({ radius = 2, segments = 8 }) -- intersect of one object
	local result1 = intersect(geometry1)
	local obs = geom3.toPoints(result1)
	local exp = {
		{
			{ 2, 0, 0 },
			{ 1.4142135623730951, -1.414213562373095, 0 },
			{ 1.0000000000000002, -1, -1.414213562373095 },
			{ 1.4142135623730951, 0, -1.414213562373095 },
		},
		{
			{ 1.4142135623730951, 0, 1.414213562373095 },
			{ 1.0000000000000002, -1, 1.414213562373095 },
			{ 1.4142135623730951, -1.414213562373095, 0 },
			{ 2, 0, 0 },
		},
		{
			{ 1.4142135623730951, 0, -1.414213562373095 },
			{ 1.0000000000000002, -1, -1.414213562373095 },
			{ 1.2246467991473532e-16, 0, -2 },
		},
		{
			{ 1.2246467991473532e-16, 0, 2 },
			{ 1.0000000000000002, -1, 1.414213562373095 },
			{ 1.4142135623730951, 0, 1.414213562373095 },
		},
		{
			{ 1.4142135623730951, -1.414213562373095, 0 },
			{ 1.2246467991473532e-16, -2, 0 },
			{ 8.659560562354934e-17, -1.4142135623730951, -1.414213562373095 },
			{ 1.0000000000000002, -1, -1.414213562373095 },
		},
		{
			{ 1.0000000000000002, -1, 1.414213562373095 },
			{ 8.659560562354934e-17, -1.4142135623730951, 1.414213562373095 },
			{ 1.2246467991473532e-16, -2, 0 },
			{ 1.4142135623730951, -1.414213562373095, 0 },
		},
		{
			{ 1.0000000000000002, -1, -1.414213562373095 },
			{ 8.659560562354934e-17, -1.4142135623730951, -1.414213562373095 },
			{ 8.659560562354934e-17, -8.659560562354932e-17, -2 },
		},
		{
			{ 8.659560562354934e-17, -8.659560562354932e-17, 2 },
			{ 8.659560562354934e-17, -1.4142135623730951, 1.414213562373095 },
			{ 1.0000000000000002, -1, 1.414213562373095 },
		},
		{
			{ 1.2246467991473532e-16, -2, 0 },
			{ -1.414213562373095, -1.4142135623730951, 0 },
			{ -1, -1.0000000000000002, -1.414213562373095 },
			{ 8.659560562354934e-17, -1.4142135623730951, -1.414213562373095 },
		},
		{
			{ 8.659560562354934e-17, -1.4142135623730951, 1.414213562373095 },
			{ -1, -1.0000000000000002, 1.414213562373095 },
			{ -1.414213562373095, -1.4142135623730951, 0 },
			{ 1.2246467991473532e-16, -2, 0 },
		},
		{
			{ 8.659560562354934e-17, -1.4142135623730951, -1.414213562373095 },
			{ -1, -1.0000000000000002, -1.414213562373095 },
			{ 7.498798913309288e-33, -1.2246467991473532e-16, -2 },
		},
		{
			{ 7.498798913309288e-33, -1.2246467991473532e-16, 2 },
			{ -1, -1.0000000000000002, 1.414213562373095 },
			{ 8.659560562354934e-17, -1.4142135623730951, 1.414213562373095 },
		},
		{
			{ -1.414213562373095, -1.4142135623730951, 0 },
			{ -2, -2.4492935982947064e-16, 0 },
			{ -1.4142135623730951, -1.7319121124709868e-16, -1.414213562373095 },
			{ -1, -1.0000000000000002, -1.414213562373095 },
		},
		{
			{ -1, -1.0000000000000002, 1.414213562373095 },
			{ -1.4142135623730951, -1.7319121124709868e-16, 1.414213562373095 },
			{ -2, -2.4492935982947064e-16, 0 },
			{ -1.414213562373095, -1.4142135623730951, 0 },
		},
		{
			{ -1, -1.0000000000000002, -1.414213562373095 },
			{ -1.4142135623730951, -1.7319121124709868e-16, -1.414213562373095 },
			{ -8.659560562354932e-17, -8.659560562354934e-17, -2 },
		},
		{
			{ -8.659560562354932e-17, -8.659560562354934e-17, 2 },
			{ -1.4142135623730951, -1.7319121124709868e-16, 1.414213562373095 },
			{ -1, -1.0000000000000002, 1.414213562373095 },
		},
		{
			{ -2, -2.4492935982947064e-16, 0 },
			{ -1.4142135623730954, 1.414213562373095, 0 },
			{ -1.0000000000000002, 1, -1.414213562373095 },
			{ -1.4142135623730951, -1.7319121124709868e-16, -1.414213562373095 },
		},
		{
			{ -1.4142135623730951, -1.7319121124709868e-16, 1.414213562373095 },
			{ -1.0000000000000002, 1, 1.414213562373095 },
			{ -1.4142135623730954, 1.414213562373095, 0 },
			{ -2, -2.4492935982947064e-16, 0 },
		},
		{
			{ -1.4142135623730951, -1.7319121124709868e-16, -1.414213562373095 },
			{ -1.0000000000000002, 1, -1.414213562373095 },
			{ -1.2246467991473532e-16, -1.4997597826618576e-32, -2 },
		},
		{
			{ -1.2246467991473532e-16, -1.4997597826618576e-32, 2 },
			{ -1.0000000000000002, 1, 1.414213562373095 },
			{ -1.4142135623730951, -1.7319121124709868e-16, 1.414213562373095 },
		},
		{
			{ -1.4142135623730954, 1.414213562373095, 0 },
			{ -3.6739403974420594e-16, 2, 0 },
			{ -2.59786816870648e-16, 1.4142135623730951, -1.414213562373095 },
			{ -1.0000000000000002, 1, -1.414213562373095 },
		},
		{
			{ -1.0000000000000002, 1, 1.414213562373095 },
			{ -2.59786816870648e-16, 1.4142135623730951, 1.414213562373095 },
			{ -3.6739403974420594e-16, 2, 0 },
			{ -1.4142135623730954, 1.414213562373095, 0 },
		},
		{
			{ -1.0000000000000002, 1, -1.414213562373095 },
			{ -2.59786816870648e-16, 1.4142135623730951, -1.414213562373095 },
			{ -8.659560562354935e-17, 8.659560562354932e-17, -2 },
		},
		{
			{ -8.659560562354935e-17, 8.659560562354932e-17, 2 },
			{ -2.59786816870648e-16, 1.4142135623730951, 1.414213562373095 },
			{ -1.0000000000000002, 1, 1.414213562373095 },
		},
		{
			{ -3.6739403974420594e-16, 2, 0 },
			{ 1.4142135623730947, 1.4142135623730954, 0 },
			{ 0.9999999999999998, 1.0000000000000002, -1.414213562373095 },
			{ -2.59786816870648e-16, 1.4142135623730951, -1.414213562373095 },
		},
		{
			{ -2.59786816870648e-16, 1.4142135623730951, 1.414213562373095 },
			{ 0.9999999999999998, 1.0000000000000002, 1.414213562373095 },
			{ 1.4142135623730947, 1.4142135623730954, 0 },
			{ -3.6739403974420594e-16, 2, 0 },
		},
		{
			{ -2.59786816870648e-16, 1.4142135623730951, -1.414213562373095 },
			{ 0.9999999999999998, 1.0000000000000002, -1.414213562373095 },
			{ -2.2496396739927864e-32, 1.2246467991473532e-16, -2 },
		},
		{
			{ -2.2496396739927864e-32, 1.2246467991473532e-16, 2 },
			{ 0.9999999999999998, 1.0000000000000002, 1.414213562373095 },
			{ -2.59786816870648e-16, 1.4142135623730951, 1.414213562373095 },
		},
		{
			{ 1.4142135623730947, 1.4142135623730954, 0 },
			{ 2, 4.898587196589413e-16, 0 },
			{ 1.4142135623730951, 3.4638242249419736e-16, -1.414213562373095 },
			{ 0.9999999999999998, 1.0000000000000002, -1.414213562373095 },
		},
		{
			{ 0.9999999999999998, 1.0000000000000002, 1.414213562373095 },
			{ 1.4142135623730951, 3.4638242249419736e-16, 1.414213562373095 },
			{ 2, 4.898587196589413e-16, 0 },
			{ 1.4142135623730947, 1.4142135623730954, 0 },
		},
		{
			{ 0.9999999999999998, 1.0000000000000002, -1.414213562373095 },
			{ 1.4142135623730951, 3.4638242249419736e-16, -1.414213562373095 },
			{ 8.65956056235493e-17, 8.659560562354935e-17, -2 },
		},
		{
			{ 8.65956056235493e-17, 8.659560562354935e-17, 2 },
			{ 1.4142135623730951, 3.4638242249419736e-16, 1.414213562373095 },
			{ 0.9999999999999998, 1.0000000000000002, 1.414213562373095 },
		},
	}
	--[[t.notThrows:skip(function()
		return geom3.validate(result1)
	end)]]
	expect(#obs).toBe(32)
	expect(comparePolygonsAsPoints(obs, exp)).toBe(true) -- intersect of two non-overlapping objects
	local geometry2 = center({ relativeTo = { 10, 10, 10 } }, cuboid({ size = { 4, 4, 4 } }))
	local result2 = intersect(geometry1, geometry2)
	obs = geom3.toPoints(result2)
	expect(function()
		return geom3.validate(result2)
	end).never.toThrow()
	expect(#obs).toBe(0) -- intersect of two partially overlapping objects
	local geometry3 = cuboid({ size = { 18, 18, 18 } })
	local result3 = intersect(geometry2, geometry3)
	obs = geom3.toPoints(result3) -- the order changes based on the bestplane chosen in Node.js
	--[=[
  exp = [
    [[9, 9, 8], [9, 9, 9], [9, 8, 9], [9, 8, 8]],
    [[8, 9, 9], [9, 9, 9], [9, 9, 8], [8, 9, 8]],
    [[9, 8, 9], [9, 9, 9], [8, 9, 9], [8, 8, 9]],
    [[8, 9, 9], [8, 9, 8], [8, 8, 8], [8, 8, 9]],
    [[8, 8, 9], [8, 8, 8], [9, 8, 8], [9, 8, 9]],
    [[9, 9, 8], [9, 8, 8], [8, 8, 8], [8, 9, 8]]
  ]
  ]=]
	exp = {
		{ { 9, 9, 8 }, { 9, 9, 9 }, { 9, 8, 9 }, { 9, 8, 8 } },
		{ { 8, 9, 9 }, { 9, 9, 9 }, { 9, 9, 8 }, { 8, 9, 8 } },
		{ { 9, 8, 9 }, { 9, 9, 9 }, { 8, 9, 9 }, { 8, 8, 9 } },
		{ { 8, 9, 9 }, { 8, 9, 8 }, { 8, 8, 8 }, { 8, 8, 9 } },
		{ { 8, 8, 9 }, { 8, 8, 8 }, { 9, 8, 8 }, { 9, 8, 9 } },
		{ { 9, 8, 8 }, { 8, 8, 8 }, { 8, 9, 8 }, { 9, 9, 8 } },
	}
	expect(function()
		return geom3.validate(result3)
	end).never.toThrow()
	expect(#obs).toBe(6)
	expect(comparePolygonsAsPoints(obs, exp)).toBe(true) -- intersect of two completely overlapping objects
	local result4 = intersect(geometry1, geometry3)
	obs = geom3.toPoints(result4)
	--[[t.notThrows:skip(function()
		return geom3.validate(result4)
	end)]]
	expect(#obs).toBe(32)
end)
