-- ROBLOX NOTE: no upstream
local JestGlobals = require("@DevPackages/JestGlobals")
local test, expect = JestGlobals.test, JestGlobals.expect

local comparePolygonsAsPoints = require("../../../test/helpers/comparePolygonsAsPoints")
local TAU = require("../../maths/constants").TAU
local geom2, geom3, path2
do
	local ref = require("../../geometries")
	geom2, geom3, path2 = ref.geom2, ref.geom3, ref.path2
end
local extrudeLinear = require("./init").extrudeLinear
test("extrudeLinear (defaults)", function()
	local geometry2 = geom2.fromPoints({ { 5, 5 }, { -5, 5 }, { -5, -5 }, { 5, -5 } })
	local geometry3 = extrudeLinear({}, geometry2)
	local pts = geom3.toPoints(geometry3)
	local exp = {
		{ { 5, -5, 0 }, { 5, 5, 0 }, { 5, 5, 1 } },
		{ { 5, -5, 0 }, { 5, 5, 1 }, { 5, -5, 1 } },
		{ { 5, 5, 0 }, { -5, 5, 0 }, { -5, 5, 1 } },
		{ { 5, 5, 0 }, { -5, 5, 1 }, { 5, 5, 1 } },
		{ { -5, 5, 0 }, { -5, -5, 0 }, { -5, -5, 1 } },
		{ { -5, 5, 0 }, { -5, -5, 1 }, { -5, 5, 1 } },
		{ { -5, -5, 0 }, { 5, -5, 0 }, { 5, -5, 1 } },
		{ { -5, -5, 0 }, { 5, -5, 1 }, { -5, -5, 1 } },
		{ { -5, -5, 1 }, { 5, -5, 1 }, { 5, 5, 1 } },
		{ { 5, 5, 1 }, { -5, 5, 1 }, { -5, -5, 1 } },
		{ { 5, 5, 0 }, { 5, -5, 0 }, { -5, -5, 0 } },
		{ { -5, -5, 0 }, { -5, 5, 0 }, { 5, 5, 0 } },
	}
	expect(function()
		return geom3.validate(geometry3)
	end)["not"].toThrow()
	expect(#pts).toBe(12)
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
end)
test("extrudeLinear (no twist)", function()
	local geometry2 = geom2.fromPoints({ { 5, 5 }, { -5, 5 }, { -5, -5 }, { 5, -5 } })
	local geometry3 = extrudeLinear({ height = 15 }, geometry2)
	local pts = geom3.toPoints(geometry3)
	local exp = {
		{ { 5, -5, 0 }, { 5, 5, 0 }, { 5, 5, 15 } },
		{ { 5, -5, 0 }, { 5, 5, 15 }, { 5, -5, 15 } },
		{ { 5, 5, 0 }, { -5, 5, 0 }, { -5, 5, 15 } },
		{ { 5, 5, 0 }, { -5, 5, 15 }, { 5, 5, 15 } },
		{ { -5, 5, 0 }, { -5, -5, 0 }, { -5, -5, 15 } },
		{ { -5, 5, 0 }, { -5, -5, 15 }, { -5, 5, 15 } },
		{ { -5, -5, 0 }, { 5, -5, 0 }, { 5, -5, 15 } },
		{ { -5, -5, 0 }, { 5, -5, 15 }, { -5, -5, 15 } },
		{ { -5, -5, 15 }, { 5, -5, 15 }, { 5, 5, 15 } },
		{ { 5, 5, 15 }, { -5, 5, 15 }, { -5, -5, 15 } },
		{ { 5, 5, 0 }, { 5, -5, 0 }, { -5, -5, 0 } },
		{ { -5, -5, 0 }, { -5, 5, 0 }, { 5, 5, 0 } },
	}
	expect(function()
		return geom3.validate(geometry3)
	end)["not"].toThrow()
	expect(#pts).toBe(12)
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
	geometry3 = extrudeLinear({ height = -15 }, geometry2)
	pts = geom3.toPoints(geometry3)
	exp = {
		{ { 5, 5, 0 }, { 5, -5, 0 }, { 5, -5, -15 } },
		{ { 5, 5, 0 }, { 5, -5, -15 }, { 5, 5, -15 } },
		{ { -5, 5, 0 }, { 5, 5, 0 }, { 5, 5, -15 } },
		{ { -5, 5, 0 }, { 5, 5, -15 }, { -5, 5, -15 } },
		{ { -5, -5, 0 }, { -5, 5, 0 }, { -5, 5, -15 } },
		{ { -5, -5, 0 }, { -5, 5, -15 }, { -5, -5, -15 } },
		{ { 5, -5, 0 }, { -5, -5, 0 }, { -5, -5, -15 } },
		{ { 5, -5, 0 }, { -5, -5, -15 }, { 5, -5, -15 } },
		{ { -5, 5, -15 }, { 5, 5, -15 }, { 5, -5, -15 } },
		{ { 5, -5, -15 }, { -5, -5, -15 }, { -5, 5, -15 } },
		{ { 5, -5, 0 }, { 5, 5, 0 }, { -5, 5, 0 } },
		{ { -5, 5, 0 }, { -5, -5, 0 }, { 5, -5, 0 } },
	}
	expect(function()
		return geom3.validate(geometry3)
	end)["not"].toThrow()
	expect(#pts).toBe(12)
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
end)
test("extrudeLinear (twist)", function()
	local geometry2 = geom2.fromPoints({ { 5, 5 }, { -5, 5 }, { -5, -5 }, { 5, -5 } })
	local geometry3 = extrudeLinear({ height = 15, twistAngle = -TAU / 8 }, geometry2)
	local pts = geom3.toPoints(geometry3)
	local exp = {
		{ { 5, -5, 0 }, { 5, 5, 0 }, { 7.0710678118654755, 4.440892098500626e-16, 15 } },
		{
			{ 5, -5, 0 },
			{ 7.0710678118654755, 4.440892098500626e-16, 15 },
			{ 4.440892098500626e-16, -7.0710678118654755, 15 },
		},
		{ { 5, 5, 0 }, { -5, 5, 0 }, { -4.440892098500626e-16, 7.0710678118654755, 15 } },
		{
			{ 5, 5, 0 },
			{ -4.440892098500626e-16, 7.0710678118654755, 15 },
			{ 7.0710678118654755, 4.440892098500626e-16, 15 },
		},
		{ { -5, 5, 0 }, { -5, -5, 0 }, { -7.0710678118654755, -4.440892098500626e-16, 15 } },
		{
			{ -5, 5, 0 },
			{ -7.0710678118654755, -4.440892098500626e-16, 15 },
			{ -4.440892098500626e-16, 7.0710678118654755, 15 },
		},
		{ { -5, -5, 0 }, { 5, -5, 0 }, { 4.440892098500626e-16, -7.0710678118654755, 15 } },
		{
			{ -5, -5, 0 },
			{ 4.440892098500626e-16, -7.0710678118654755, 15 },
			{ -7.0710678118654755, -4.440892098500626e-16, 15 },
		},
		{
			{ -7.0710678118654755, -4.440892098500626e-16, 15 },
			{ 4.440892098500626e-16, -7.0710678118654755, 15 },
			{ 7.0710678118654755, 4.440892098500626e-16, 15 },
		},
		{
			{ 7.0710678118654755, 4.440892098500626e-16, 15 },
			{ -4.440892098500626e-16, 7.0710678118654755, 15 },
			{ -7.0710678118654755, -4.440892098500626e-16, 15 },
		},
		{ { 5, 5, 0 }, { 5, -5, 0 }, { -5, -5, 0 } },
		{ { -5, -5, 0 }, { -5, 5, 0 }, { 5, 5, 0 } },
	}
	expect(function()
		return geom3.validate(geometry3)
	end)["not"].toThrow()
	expect(#pts).toBe(12)
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
	geometry3 = extrudeLinear({ height = 15, twistAngle = TAU / 4, twistSteps = 3 }, geometry2)
	pts = geom3.toPoints(geometry3)
	exp = {
		{ { 5, -5, 0 }, { 5, 5, 0 }, { 1.830127018922194, 6.830127018922193, 5 } },
		{
			{ 5, -5, 0 },
			{ 1.830127018922194, 6.830127018922193, 5 },
			{ 6.830127018922193, -1.830127018922194, 5 },
		},
		{ { 5, 5, 0 }, { -5, 5, 0 }, { -6.830127018922193, 1.830127018922194, 5 } },
		{
			{ 5, 5, 0 },
			{ -6.830127018922193, 1.830127018922194, 5 },
			{ 1.830127018922194, 6.830127018922193, 5 },
		},
		{ { -5, 5, 0 }, { -5, -5, 0 }, { -1.830127018922194, -6.830127018922193, 5 } },
		{
			{ -5, 5, 0 },
			{ -1.830127018922194, -6.830127018922193, 5 },
			{ -6.830127018922193, 1.830127018922194, 5 },
		},
		{ { -5, -5, 0 }, { 5, -5, 0 }, { 6.830127018922193, -1.830127018922194, 5 } },
		{
			{ -5, -5, 0 },
			{ 6.830127018922193, -1.830127018922194, 5 },
			{ -1.830127018922194, -6.830127018922193, 5 },
		},
		{
			{ 6.830127018922193, -1.830127018922194, 5 },
			{ 1.830127018922194, 6.830127018922193, 5 },
			{ -1.8301270189221923, 6.830127018922193, 10 },
		},
		{
			{ 6.830127018922193, -1.830127018922194, 5 },
			{ -1.8301270189221923, 6.830127018922193, 10 },
			{ 6.830127018922193, 1.8301270189221923, 10 },
		},
		{
			{ 1.830127018922194, 6.830127018922193, 5 },
			{ -6.830127018922193, 1.830127018922194, 5 },
			{ -6.830127018922193, -1.8301270189221923, 10 },
		},
		{
			{ 1.830127018922194, 6.830127018922193, 5 },
			{ -6.830127018922193, -1.8301270189221923, 10 },
			{ -1.8301270189221923, 6.830127018922193, 10 },
		},
		{
			{ -6.830127018922193, 1.830127018922194, 5 },
			{ -1.830127018922194, -6.830127018922193, 5 },
			{ 1.8301270189221923, -6.830127018922193, 10 },
		},
		{
			{ -6.830127018922193, 1.830127018922194, 5 },
			{ 1.8301270189221923, -6.830127018922193, 10 },
			{ -6.830127018922193, -1.8301270189221923, 10 },
		},
		{
			{ -1.830127018922194, -6.830127018922193, 5 },
			{ 6.830127018922193, -1.830127018922194, 5 },
			{ 6.830127018922193, 1.8301270189221923, 10 },
		},
		{
			{ -1.830127018922194, -6.830127018922193, 5 },
			{ 6.830127018922193, 1.8301270189221923, 10 },
			{ 1.8301270189221923, -6.830127018922193, 10 },
		},
		{
			{ 6.830127018922193, 1.8301270189221923, 10 },
			{ -1.8301270189221923, 6.830127018922193, 10 },
			{ -5, 5, 15 },
		},
		{ { 6.830127018922193, 1.8301270189221923, 10 }, { -5, 5, 15 }, { 5, 5, 15 } },
		{
			{ -1.8301270189221923, 6.830127018922193, 10 },
			{ -6.830127018922193, -1.8301270189221923, 10 },
			{ -5, -5, 15 },
		},
		{ { -1.8301270189221923, 6.830127018922193, 10 }, { -5, -5, 15 }, { -5, 5, 15 } },
		{
			{ -6.830127018922193, -1.8301270189221923, 10 },
			{ 1.8301270189221923, -6.830127018922193, 10 },
			{ 5, -5, 15 },
		},
		{ { -6.830127018922193, -1.8301270189221923, 10 }, { 5, -5, 15 }, { -5, -5, 15 } },
		{
			{ 1.8301270189221923, -6.830127018922193, 10 },
			{ 6.830127018922193, 1.8301270189221923, 10 },
			{ 5, 5, 15 },
		},
		{ { 1.8301270189221923, -6.830127018922193, 10 }, { 5, 5, 15 }, { 5, -5, 15 } },
		{ { 5, -5, 15 }, { 5, 5, 15 }, { -5, 5, 15 } },
		{ { -5, 5, 15 }, { -5, -5, 15 }, { 5, -5, 15 } },
		{ { 5, 5, 0 }, { 5, -5, 0 }, { -5, -5, 0 } },
		{ { -5, -5, 0 }, { -5, 5, 0 }, { 5, 5, 0 } },
	}
	expect(#pts).toBe(28)
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
	geometry3 = extrudeLinear({ height = 15, twistAngle = TAU / 2, twistSteps = 30 }, geometry2)
	pts = geom3.toPoints(geometry3)
	expect(function()
		return geom3.validate(geometry3)
	end)["not"].toThrow()
	expect(#pts).toBe(244)
end)
test("extrudeLinear (holes)", function()
	local geometry2 = geom2.create({
		{ { -5, 5 }, { -5, -5 } },
		{ { -5, -5 }, { 5, -5 } },
		{ { 5, -5 }, { 5, 5 } },
		{ { 5, 5 }, { -5, 5 } },
		{ { -2, -2 }, { -2, 2 } },
		{ { 2, -2 }, { -2, -2 } },
		{ { 2, 2 }, { 2, -2 } },
		{ { -2, 2 }, { 2, 2 } },
	})
	local geometry3 = extrudeLinear({ height = 15 }, geometry2)
	local pts = geom3.toPoints(geometry3)
	local exp = {
		{ { -5, 5, 0 }, { -5, -5, 0 }, { -5, -5, 15 } },
		{ { -5, 5, 0 }, { -5, -5, 15 }, { -5, 5, 15 } },
		{ { -5, -5, 0 }, { 5, -5, 0 }, { 5, -5, 15 } },
		{ { -5, -5, 0 }, { 5, -5, 15 }, { -5, -5, 15 } },
		{ { 5, -5, 0 }, { 5, 5, 0 }, { 5, 5, 15 } },
		{ { 5, -5, 0 }, { 5, 5, 15 }, { 5, -5, 15 } },
		{ { 5, 5, 0 }, { -5, 5, 0 }, { -5, 5, 15 } },
		{ { 5, 5, 0 }, { -5, 5, 15 }, { 5, 5, 15 } },
		{ { -2, -2, 0 }, { -2, 2, 0 }, { -2, 2, 15 } },
		{ { -2, -2, 0 }, { -2, 2, 15 }, { -2, -2, 15 } },
		{ { 2, -2, 0 }, { -2, -2, 0 }, { -2, -2, 15 } },
		{ { 2, -2, 0 }, { -2, -2, 15 }, { 2, -2, 15 } },
		{ { 2, 2, 0 }, { 2, -2, 0 }, { 2, -2, 15 } },
		{ { 2, 2, 0 }, { 2, -2, 15 }, { 2, 2, 15 } },
		{ { -2, 2, 0 }, { 2, 2, 0 }, { 2, 2, 15 } },
		{ { -2, 2, 0 }, { 2, 2, 15 }, { -2, 2, 15 } },
		{ { 5, -5, 15 }, { 5, 5, 15 }, { 2, 2, 15 } },
		{ { -2, 2, 15 }, { 2, 2, 15 }, { 5, 5, 15 } },
		{ { 5, -5, 15 }, { 2, 2, 15 }, { 2, -2, 15 } },
		{ { -2, 2, 15 }, { 5, 5, 15 }, { -5, 5, 15 } },
		{ { -5, -5, 15 }, { 5, -5, 15 }, { 2, -2, 15 } },
		{ { -2, -2, 15 }, { -2, 2, 15 }, { -5, 5, 15 } },
		{ { -5, -5, 15 }, { 2, -2, 15 }, { -2, -2, 15 } },
		{ { -2, -2, 15 }, { -5, 5, 15 }, { -5, -5, 15 } },
		{ { 2, 2, 0 }, { 5, 5, 0 }, { 5, -5, 0 } },
		{ { 5, 5, 0 }, { 2, 2, 0 }, { -2, 2, 0 } },
		{ { 2, -2, 0 }, { 2, 2, 0 }, { 5, -5, 0 } },
		{ { -5, 5, 0 }, { 5, 5, 0 }, { -2, 2, 0 } },
		{ { 2, -2, 0 }, { 5, -5, 0 }, { -5, -5, 0 } },
		{ { -5, 5, 0 }, { -2, 2, 0 }, { -2, -2, 0 } },
		{ { -2, -2, 0 }, { 2, -2, 0 }, { -5, -5, 0 } },
		{ { -5, -5, 0 }, { -5, 5, 0 }, { -2, -2, 0 } },
	}
	expect(function()
		return geom3.validate(geometry3)
	end)["not"].toThrow()
	expect(#pts).toBe(32)
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
end)
test("extrudeLinear (path2)", function()
	local geometry2 = path2.fromPoints({ closed = true }, { { 0, 0 }, { 12, 0 }, { 6, 10 } })
	local geometry3 = extrudeLinear({ height = 15 }, geometry2)
	expect(function()
		return geom3.validate(geometry3)
	end)["not"].toThrow()
	local pts = geom3.toPoints(geometry3)
	local exp = {
		{ { 6, 10, 0 }, { 0, 0, 0 }, { 0, 0, 15 } },
		{ { 6, 10, 0 }, { 0, 0, 15 }, { 6, 10, 15 } },
		{ { 0, 0, 0 }, { 12, 0, 0 }, { 12, 0, 15 } },
		{ { 0, 0, 0 }, { 12, 0, 15 }, { 0, 0, 15 } },
		{ { 12, 0, 0 }, { 6, 10, 0 }, { 6, 10, 15 } },
		{ { 12, 0, 0 }, { 6, 10, 15 }, { 12, 0, 15 } },
		{ { 12, 0, 15 }, { 6, 10, 15 }, { 0, 0, 15 } },
		{ { 0, 0, 0 }, { 6, 10, 0 }, { 12, 0, 0 } },
	}
	expect(#pts).toBe(8)
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
end)
test("extrudeLinear (unclosed path throws error)", function()
	local geometry2 = path2.fromPoints({ closed = false }, { { 0, 0 }, { 12, 0 }, { 6, 10 } })
	expect(function()
		return extrudeLinear({}, geometry2)
	end).toThrow()
end)
