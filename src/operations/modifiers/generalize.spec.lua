-- ROBLOX NOTE: no upstream
local JestGlobals = require("@DevPackages/JestGlobals")
local test, expect = JestGlobals.test, JestGlobals.expect

local comparePolygonsAsPoints = require("../../../test/helpers").comparePolygonsAsPoints
local TAU = require("../../maths/constants").TAU
local geom3 = require("../../geometries").geom3
local cuboid = require("../../primitives").cuboid
local generalize = require("./init").generalize
test("generalize: generalize of a geom3 produces an expected geom3", function()
	local geometry1 = cuboid({ size = { TAU / 2, TAU / 4, TAU } }) -- apply no modifications
	local result = generalize({}, geometry1)
	local pts = geom3.toPoints(result)
	local exp = {
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
		},
		{
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
		},
	}
	expect(function()
		return geom3.validate(result)
	end)["not"].toThrow()
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true) -- apply snap only
	result = generalize({ snap = true }, geometry1)
	pts = geom3.toPoints(result)
	exp = {
		{
			{ -1.5707910908071407, -0.7854138713607164, -3.1415821816142815 },
			{ -1.5707910908071407, -0.7854138713607164, 3.1415821816142815 },
			{ -1.5707910908071407, 0.7854138713607164, 3.1415821816142815 },
			{ -1.5707910908071407, 0.7854138713607164, -3.1415821816142815 },
		},
		{
			{ 1.5707910908071407, -0.7854138713607164, -3.1415821816142815 },
			{ 1.5707910908071407, 0.7854138713607164, -3.1415821816142815 },
			{ 1.5707910908071407, 0.7854138713607164, 3.1415821816142815 },
			{ 1.5707910908071407, -0.7854138713607164, 3.1415821816142815 },
		},
		{
			{ -1.5707910908071407, -0.7854138713607164, -3.1415821816142815 },
			{ 1.5707910908071407, -0.7854138713607164, -3.1415821816142815 },
			{ 1.5707910908071407, -0.7854138713607164, 3.1415821816142815 },
			{ -1.5707910908071407, -0.7854138713607164, 3.1415821816142815 },
		},
		{
			{ -1.5707910908071407, 0.7854138713607164, -3.1415821816142815 },
			{ -1.5707910908071407, 0.7854138713607164, 3.1415821816142815 },
			{ 1.5707910908071407, 0.7854138713607164, 3.1415821816142815 },
			{ 1.5707910908071407, 0.7854138713607164, -3.1415821816142815 },
		},
		{
			{ -1.5707910908071407, -0.7854138713607164, -3.1415821816142815 },
			{ -1.5707910908071407, 0.7854138713607164, -3.1415821816142815 },
			{ 1.5707910908071407, 0.7854138713607164, -3.1415821816142815 },
			{ 1.5707910908071407, -0.7854138713607164, -3.1415821816142815 },
		},
		{
			{ -1.5707910908071407, -0.7854138713607164, 3.1415821816142815 },
			{ 1.5707910908071407, -0.7854138713607164, 3.1415821816142815 },
			{ 1.5707910908071407, 0.7854138713607164, 3.1415821816142815 },
			{ -1.5707910908071407, 0.7854138713607164, 3.1415821816142815 },
		},
	}
	expect(function()
		return geom3.validate(result)
	end)["not"].toThrow()
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true) -- apply triangulate only
	result = generalize({ triangulate = true }, geometry1)
	pts = geom3.toPoints(result)
	exp = {
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
		},
		{
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
		},
		{
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
		},
	}
	expect(function()
		return geom3.validate(result)
	end)["not"].toThrow()
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
	local geometry2 = result -- save the triangles for another test
	-- apply simplify only (triangles => quads)
	result = generalize({ simplify = true }, geometry2)
	pts = geom3.toPoints(result)
	exp = {
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
		},
		{
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
		},
		{
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, -3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, -3.141592653589793 },
		},
		{
			{ -1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, -0.7853981633974483, 3.141592653589793 },
			{ 1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
			{ -1.5707963267948966, 0.7853981633974483, 3.141592653589793 },
		},
	}
	expect(function()
		return geom3.validate(result)
	end)["not"].toThrow()
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
end)
test("generalize: generalize of a geom3 with T junctions produces an expected geom3", function()
	local geometry1 = geom3.fromPoints({
		{ { -1, -1, -1 }, { -1, -1, 1 }, { -1, 1, 1 }, { -1, 1, -1 } },
		{ { 1, -1, -1 }, { 1, 1, -1 }, { 1, 1, 1 }, { 1, -1, 1 } },
		{ { -1, -1, -1 }, { 1, -1, -1 }, { 1, -1, 1 }, { -1, -1, 1 } },
		{ { -1, 1, -1 }, { -1, 1, 1 }, { 1, 1, 1 }, { 1, 1, -1 } },
		{ { -1, -1, -1 }, { -1, 1, -1 }, { 1, 1, -1 }, { 1, -1, -1 } },
		-- T junctions
		-- T junctions
		{ { -1, -1, 1 }, { 0, -1, 1 }, { 0, 0, 1 } },
		{ { -1, 0, 1 }, { -1, -1, 1 }, { 0, 0, 1 } },
		{ { 0, -1, 1 }, { 1, -1, 1 }, { 0, 0, 1 } },
		{ { 1, -1, 1 }, { 1, 0, 1 }, { 0, 0, 1 } },
		{ { 1, 0, 1 }, { 1, 1, 1 }, { 0, 0, 1 } },
		{ { 1, 1, 1 }, { 0, 1, 1 }, { 0, 0, 1 } },
		{ { 0, 1, 1 }, { -1, 1, 1 }, { 0, 0, 1 } },
		{ { -1, 1, 1 }, { -1, 0, 1 }, { 0, 0, 1 } },
	})
	local result = generalize({ snap = true, triangulate = true }, geometry1)
	local pts = geom3.toPoints(result)
	local exp = {
		{ { -1, 0, 0.2 }, { -1, -1, -1 }, { -1, -1, 1 } },
		{ { -1, 0, 0.2 }, { -1, -1, 1 }, { -1, 0, 1 } },
		{ { -1, 0, 0.2 }, { -1, 0, 1 }, { -1, 1, 1 } },
		{ { -1, 0, 0.2 }, { -1, 1, 1 }, { -1, 1, -1 } },
		{ { -1, 0, 0.2 }, { -1, 1, -1 }, { -1, -1, -1 } },
		{ { 1, 0, 0.2 }, { 1, -1, -1 }, { 1, 1, -1 } },
		{ { 1, 0, 0.2 }, { 1, 1, -1 }, { 1, 1, 1 } },
		{ { 1, 0, 0.2 }, { 1, 1, 1 }, { 1, 0, 1 } },
		{ { 1, 0, 0.2 }, { 1, 0, 1 }, { 1, -1, 1 } },
		{ { 1, 0, 0.2 }, { 1, -1, 1 }, { 1, -1, -1 } },
		{ { 0, -1, 0.2 }, { -1, -1, -1 }, { 1, -1, -1 } },
		{ { 0, -1, 0.2 }, { 1, -1, -1 }, { 1, -1, 1 } },
		{ { 0, -1, 0.2 }, { 1, -1, 1 }, { 0, -1, 1 } },
		{ { 0, -1, 0.2 }, { 0, -1, 1 }, { -1, -1, 1 } },
		{ { 0, -1, 0.2 }, { -1, -1, 1 }, { -1, -1, -1 } },
		{ { 0, 1, 0.2 }, { -1, 1, -1 }, { -1, 1, 1 } },
		{ { 0, 1, 0.2 }, { -1, 1, 1 }, { 0, 1, 1 } },
		{ { 0, 1, 0.2 }, { 0, 1, 1 }, { 1, 1, 1 } },
		{ { 0, 1, 0.2 }, { 1, 1, 1 }, { 1, 1, -1 } },
		{ { 0, 1, 0.2 }, { 1, 1, -1 }, { -1, 1, -1 } },
		{ { -1, -1, -1 }, { -1, 1, -1 }, { 1, 1, -1 } },
		{ { -1, -1, -1 }, { 1, 1, -1 }, { 1, -1, -1 } },
		{ { -1, -1, 1 }, { 0, -1, 1 }, { 0, 0, 1 } },
		{ { -1, 0, 1 }, { -1, -1, 1 }, { 0, 0, 1 } },
		{ { 0, -1, 1 }, { 1, -1, 1 }, { 0, 0, 1 } },
		{ { 1, -1, 1 }, { 1, 0, 1 }, { 0, 0, 1 } },
		{ { 1, 0, 1 }, { 1, 1, 1 }, { 0, 0, 1 } },
		{ { 1, 1, 1 }, { 0, 1, 1 }, { 0, 0, 1 } },
		{ { 0, 1, 1 }, { -1, 1, 1 }, { 0, 0, 1 } },
		{ { -1, 1, 1 }, { -1, 0, 1 }, { 0, 0, 1 } },
	}
	expect(function()
		return geom3.validate(result)
	end)["not"].toThrow()
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true)
end)
