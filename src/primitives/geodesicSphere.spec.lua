-- ROBLOX NOTE: no upstream
local JestGlobals = require("@DevPackages/JestGlobals")
local test, expect = JestGlobals.test, JestGlobals.expect

local geom3 = require("../geometries/geom3")
local geodesicSphere = require("./init").geodesicSphere
local comparePolygonsAsPoints = require("../../test/helpers/comparePolygonsAsPoints")
test("geodesicSphere (defaults)", function()
	local obs = geodesicSphere()
	local pts = geom3.toPoints(obs)
	expect(function()
		return geom3.validate(obs)
	end)["not"].toThrow()
	expect(#pts).toBe(20)
end)
test("geodesicSphere (options)", function()
	-- test radius
	local obs = geodesicSphere({ radius = 5 })
	local pts = geom3.toPoints(obs)
	local exp = {
		{
			{ 4.253254557317035, 0, 2.628654726407001 },
			{ 2.628654726407001, -4.253254557317035, 0 },
			{ 4.253254557317035, 0, -2.628654726407001 },
		},
		{
			{ 4.253254557317035, 0, -2.628654726407001 },
			{ 2.628654726407001, 4.253254557317035, 0 },
			{ 4.253254557317035, 0, 2.628654726407001 },
		},
		{
			{ 4.253254557317035, 0, -2.628654726407001 },
			{ 0, -2.628654726407001, -4.253254557317035 },
			{ 0, 2.628654726407001, -4.253254557317035 },
		},
		{
			{ 4.253254557317035, 0, -2.628654726407001 },
			{ 0, 2.628654726407001, -4.253254557317035 },
			{ 2.628654726407001, 4.253254557317035, 0 },
		},
		{
			{ 4.253254557317035, 0, -2.628654726407001 },
			{ 2.628654726407001, -4.253254557317035, 0 },
			{ 0, -2.628654726407001, -4.253254557317035 },
		},
		{
			{ 0, -2.628654726407001, 4.253254557317035 },
			{ 4.253254557317035, 0, 2.628654726407001 },
			{ 0, 2.628654726407001, 4.253254557317035 },
		},
		{
			{ 2.628654726407001, -4.253254557317035, 0 },
			{ 4.253254557317035, 0, 2.628654726407001 },
			{ 0, -2.628654726407001, 4.253254557317035 },
		},
		{
			{ 4.253254557317035, 0, 2.628654726407001 },
			{ 2.628654726407001, 4.253254557317035, 0 },
			{ 0, 2.628654726407001, 4.253254557317035 },
		},
		{
			{ -4.253254557317035, 0, -2.628654726407001 },
			{ -2.628654726407001, -4.253254557317035, 0 },
			{ -4.253254557317035, 0, 2.628654726407001 },
		},
		{
			{ -4.253254557317035, 0, 2.628654726407001 },
			{ -2.628654726407001, 4.253254557317035, 0 },
			{ -4.253254557317035, 0, -2.628654726407001 },
		},
		{
			{ 0, -2.628654726407001, 4.253254557317035 },
			{ 0, 2.628654726407001, 4.253254557317035 },
			{ -4.253254557317035, 0, 2.628654726407001 },
		},
		{
			{ -4.253254557317035, 0, 2.628654726407001 },
			{ -2.628654726407001, -4.253254557317035, 0 },
			{ 0, -2.628654726407001, 4.253254557317035 },
		},
		{
			{ 0, 2.628654726407001, 4.253254557317035 },
			{ -2.628654726407001, 4.253254557317035, 0 },
			{ -4.253254557317035, 0, 2.628654726407001 },
		},
		{
			{ 0, 2.628654726407001, -4.253254557317035 },
			{ 0, -2.628654726407001, -4.253254557317035 },
			{ -4.253254557317035, 0, -2.628654726407001 },
		},
		{
			{ -4.253254557317035, 0, -2.628654726407001 },
			{ -2.628654726407001, 4.253254557317035, 0 },
			{ 0, 2.628654726407001, -4.253254557317035 },
		},
		{
			{ -4.253254557317035, 0, -2.628654726407001 },
			{ 0, -2.628654726407001, -4.253254557317035 },
			{ -2.628654726407001, -4.253254557317035, 0 },
		},
		{
			{ 0, -2.628654726407001, 4.253254557317035 },
			{ -2.628654726407001, -4.253254557317035, 0 },
			{ 2.628654726407001, -4.253254557317035, 0 },
		},
		{
			{ 0, 2.628654726407001, 4.253254557317035 },
			{ 2.628654726407001, 4.253254557317035, 0 },
			{ -2.628654726407001, 4.253254557317035, 0 },
		},
		{
			{ 0, 2.628654726407001, -4.253254557317035 },
			{ -2.628654726407001, 4.253254557317035, 0 },
			{ 2.628654726407001, 4.253254557317035, 0 },
		},
		{
			{ 0, -2.628654726407001, -4.253254557317035 },
			{ 2.628654726407001, -4.253254557317035, 0 },
			{ -2.628654726407001, -4.253254557317035, 0 },
		},
	}
	expect(function()
		return geom3.validate(obs)
	end)["not"].toThrow()
	expect(#pts).toBe(20)
	expect(comparePolygonsAsPoints(pts, exp)).toBe(true) -- test frequency
	obs = geodesicSphere({ radius = 5, frequency = 18 })
	pts = geom3.toPoints(obs)
	t.notThrows:skip(function()
		return geom3.validate(obs)
	end)
	expect(#pts).toBe(180)
end)
test("geodesicSphere (zero radius)", function()
	local obs = geodesicSphere({ radius = 0 })
	local pts = geom3.toPoints(obs)
	expect(function()
		return geom3.validate(obs)
	end)["not"].toThrow()
	expect(#pts).toBe(0)
end)
